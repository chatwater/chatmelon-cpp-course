#include <iostream>
#include <cstdio>
using namespace std;
// 显示屏：每个阿拉伯数字都可以显示在一个3*5的矩形中，
// 二维数组、三维数组
int main() {
    int tubes[10][8] = { //数字i的第j个显示管是什么
        {6, 0, 1, 2, 4, 5, 6}, //数字0
        {2, 2, 5},// 数字1
        {5, 0, 2, 3, 4, 6},// 数字2
        {5, 0, 2, 3, 5, 6},// 数字3
        {4, 1, 2, 3, 5},// 数字4
        {5, 0, 1, 3, 5, 6},// 数字5
        {6, 0, 1, 3, 4, 5, 6},// 数字6
        {3, 0, 2, 5},// 数字7
        {7, 0, 1, 2, 3, 4, 5, 6},// 数字8
        {6, 0, 1, 2, 3, 5, 6} //数字9
    }; // 显示数字i的管道数
    int dot[7][3][2] = { //每个显示管的3个点相对于左上角的坐标偏移
        {{0, 0}, {0, 1}, {0, 2}}, //第1个显示管
        {{0, 0}, {1, 0}, {2, 0}}, //第2个显示管
        {{0, 2}, {1, 2}, {2, 2}}, //第3个显示管
        {{2, 0}, {2, 1}, {2, 2}}, //第4个显示管
        {{2, 0}, {3, 0}, {4, 0}}, //第5个显示管
        {{2, 2}, {3, 2}, {4, 2}}, //第6个显示管
        {{4, 0}, {4, 1}, {4, 2}}, //第7个显示管
    };
    char num[110], out[5][100];
    int n;
    cin >> n; // 输入数字的个数
    for (int i = 0; i < n; i++) {
        cin >> num[i]; // 输入数字
    }
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 4 * n - 1; j++) {
            out[i][j] = ' '; // 初始化显示屏为' ',此处可修改为'.'、'-'等字符
        }
        for (int i = 0; i < n; i++) {
            int basex = 0, basey = i * 4, digit = num[i] - '0'; // 计算数字的基准坐标
            for (int j = 1; j <= tubes[digit][0]; j++) { // 处理每个要被点亮的显示管
                int tubenum = tubes[digit][j]; // 显示管的编号
                out[dot[tubenum][0][0]][basey + dot[tubenum][0][1]] = '*'; // 点亮第一个点
                out[dot[tubenum][1][0]][basey + dot[tubenum][1][1]] = '*'; // 点亮第二个点
                out[dot[tubenum][2][0]][basey + dot[tubenum][2][1]] = '*'; // 点亮第三个点
            }
        }
    }
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 4 * n - 1; j++) {
            cout << out[i][j]; // 输出显示屏
        }
        cout << endl;
    }
    cout << endl;
    return 0;
}

/*
效果如下：

输入：
10
0123456789

输出：
***   * *** *** * * *** *** *** *** ***
* *   *   *   * * * *   *     * * * * *
* *   * *** *** *** *** ***   * *** ***
* *   * *     *   *   * * *   * * *   *
***   * *** ***   * *** ***   * *** ***

*/